import {
  DAIAddress,
  DAIxAddress,
  daixEthxExchangeAddress,
  daixMaticxExchangeAddress,
  daixMkrxExchangeAddress,
  ethxDaixExchangeAddress,
  hostAddress,
  idaAddress,
  IDLEAddress,
  IDLExAddress,
  MATICxAddress,
  maticxDaixExchangeAddress,
  maticxUsdcxExchangeAddress,
  MKRAddress,
  MKRxAddress,
  mkrxDaixExchangeAddress,
  mkrxUsdcxExchangeAddress,
  rexReferralAddress,
  RICAddress,
  rickosheaAppAddress,
  SUSHIAddress,
  SUSHIxAddress,
  twoWayWETHMarketAddress,
  twoWayMarketWBTCAddress,
  USDCAddress,
  USDCxAddress,
  usdcxEthSlpxExchangeAddress,
  usdcxIdleExchangeAddress,
  usdcxMaticxExchangeAddress,
  usdcxMkrxExchangeAddress,
  usdcxRicExchangeAddress,
  usdcxWbtcxExchangeAddress,
  usdcxWethxExchangeAddress,
  WBTCAddress,
  WBTCxAddress,
  wbtcxUsdcxExchangeAddress,
  WETHAddress,
  WETHxAddress,
  wethxUsdcxExchangeAddress,
  twoWayMarketDAIWETHAddress,
  // twoWayMarketMATICUSDCAddress,
  // twoWayMarketMATICDAIAddress,
  // twoWayMarketWBTCDAIAddress,
  twoWayMarketRICUSDCAddress,

	DAIAddress,
	DAIxAddress,
	hostAddress,
	idaAddress,
	MATICxAddress,
	rexReferralAddress,
	RICAddress,
	rickosheaAppAddress,
	usdcEthMarketAddress,
	ethUsdcMarketAddress,
	usdcWbtcMarketAddress,
	wbtcUsdcMarketAddress,
	usdcMaticMarketAddress,
	maticUsdcMarketAddress,
	daiEthMarketAddress,
	ethDaiMarketAddress,
	daiWbtcMarketAddress,
	wbtcDaiMarketAddress,
	daiMaticMarketAddress,
	maticDaiMarketAddress,
	USDCAddress,
	USDCxAddress,
	ricRexShirtLaunchpadAddress,
	ricRexHatLaunchpadAddress,
	WBTCAddress,
	WBTCxAddress,
	WETHAddress,
	WETHxAddress,
	USDC_DAI_MARKET_ADDRESS,
	DAI_USDC_MARKET_ADDRESS,
	usdcRicMarketAddress,
	ricUsdcMarketAddress,
	IbAlluoUSDAddress,
	StIbAlluoUSDAddress,
	IbAlluoETHAddress,
	StIbAlluoETHAddress,
	IbAlluoBTCAddress,
	StIbAlluoBTCAddress,
	twoWayMarketibAlluoUSDETHAddress,
	twoWayMarketibAlluoUSDBTCAddress,
	usdcxibAlluoUSDAddress,
	usdcxRicExchangeAddress,
} from 'constants/polygon_config';

export enum ExchangeKeys {
  'DAI_ETH' = 'twoWayDaiWeth',
  'DAI_MATIC' = 'daiMatic',
  'DAI_MKR' = 'daiMkr',
  'ETH_DAI' = 'twoWayWethDai',
  'MATIC_DAI' = 'maticDai',
  'MATIC_USDC' = 'maticUsdc',
  'MKR_DAI' = 'mkrDai',
  'MKR_USDC' = 'mkrUsdc',
  'USDC_ETH_SLP' = 'usdcEthSlp',
  'USDC_IDLE' = 'usdcIdle',
  'USDC_MATIC' = 'usdcMatic',
  'USDC_MKR' = 'usdcMkr',
  'USDC_RIC' = 'usdcRic',
  'USDC_WBTC' = 'twoWayusdcWbtc',
  'USDC_WETH' = 'twoWayusdcWeth',
  'WBTC_USDC' = 'twoWaywbtcUsdc',
  'WETH_USDC' = 'twoWaywethUsdc',
  'TWO_WAY_USDC_RIC' = 'twoWayUsdcRic',
  'TWO_WAY_RIC_USDC' = 'twoWayRicUsdc',
  // 'TWO_WAY_MATIC_USDC' = 'twoWayMaticUsdc',
  // 'TWO_WAY_USDC_MATIC' = 'twoWayUsdcMatic',
  // 'TWO_WAY_MATIC_DAI' = 'twoWayMaticDai',
  // 'TWO_WAY_DAI_MATIC' = 'twoWayDaiMatic',
  // 'TWO_WAY_WBTC_DAI' = 'twoWayWbtcDai',
  // 'TWO_WAY_DAI_WBTC' = 'twoWayDaiWbtc',
  'MATICx' = 'maticx',
  'MKRx' = 'mkrx',
  'MKR' = 'mkr',
  'DAIx' = 'daix',
  'DAI' = 'dai',
  'USDCx' = 'usdcx',
  'USDC' = 'usdc',
  'WETHx' = 'wethx',
  'WETH' = 'weth',
  'WBTCx' = 'wbtcx',
  'WBTC' = 'wbtc',
  'HOST' = 'host',
  'IDA' = 'ida',
  'RICapp' = 'ricApp',
  'RIC' = 'ric',
  'SUSHIx' = 'sushix',
  'SUSHI' = 'sushi',
  'IDLEx' = 'idlex',
  'IDLE' = 'idle',
  'Referral' = 'referral',
	'USDC_IBALLUO' = 'usdcxibAlluoUSD',
	'USDC_WBTC' = 'twoWayusdcWbtc',
	'USDC_WETH' = 'twoWayusdcWeth',
	'WBTC_USDC' = 'twoWaywbtcUsdc',
	'WETH_USDC' = 'twoWaywethUsdc',
	'USDC_DAI' = 'usdcDai',
	'DAI_USDC' = 'daiUsdc',
	'TWO_WAY_USDC_RIC' = 'twoWayUsdcRic',
	'TWO_WAY_RIC_USDC' = 'twoWayRicUsdc',
	'TWO_WAY_MATIC_USDC' = 'twoWayMaticUsdc',
	'TWO_WAY_USDC_MATIC' = 'twoWayUsdcMatic',
	'TWO_WAY_MATIC_DAI' = 'twoWayMaticDai',
	'TWO_WAY_DAI_MATIC' = 'twoWayDaiMatic',
	'TWO_WAY_WBTC_DAI' = 'twoWayWbtcDai',
	'TWO_WAY_DAI_WBTC' = 'twoWayDaiWbtc',
	'TWO_WAY_IBUSD_IBETH' = 'twoWayIbUsdIbEth',
	'TWO_WAY_IBETH_IBUSD' = 'twoWayIbEthIbUsd',
	'TWO_WAY_IBUSD_IBBTC' = 'twoWayIbUsdIbBTC',
	'TWO_WAY_IBBTC_IBUSD' = 'twoWayIbBTCIbUsd',
	'MATICx' = 'maticx',
	'DAIx' = 'daix',
	'DAI' = 'dai',
	'USDCx' = 'usdcx',
	'USDC' = 'usdc',
	'WETHx' = 'wethx',
	'WETH' = 'weth',
	'WBTCx' = 'wbtcx',
	'WBTC' = 'wbtc',
	'HOST' = 'host',
	'IDA' = 'ida',
	'RICapp' = 'ricApp',
	'RIC' = 'ric',
	'StIbAlluoUSD' = 'stiballuousd',
	'StIbAlluoETH' = 'stiballuoeth',
	'StIbAlluoBTC' = 'stiballuobtc',
	'IbAlluoUSD' = 'iballuousd',
	'IbAlluoETH' = 'iballuoeth',
	'IbAlluoBTC' = 'iballuobtc',
	'Referral' = 'referral',
}

export const getExchangeAddressFromKey = (exchangeKey: ExchangeKeys) => {
	const addresses = {
		ricRexShirt: ricRexShirtLaunchpadAddress,
		ricRexHat: ricRexHatLaunchpadAddress,
		usdcxibAlluoUSD: usdcxibAlluoUSDAddress,
		maticx: MATICxAddress,
		daix: DAIxAddress,
		dai: DAIAddress,
		usdcx: USDCxAddress,
		usdc: USDCAddress,
		wethx: WETHxAddress,
		weth: WETHAddress,
		wbtcx: WBTCxAddress,
		wbtc: WBTCAddress,
		host: hostAddress,
		ida: idaAddress,
		ricApp: rickosheaAppAddress,
		ric: RICAddress,
		stiballuoeth: StIbAlluoETHAddress,
		stiballuousd: StIbAlluoUSDAddress,
		iballuousd: IbAlluoUSDAddress,
		iballuoeth: IbAlluoETHAddress,
		stiballuobtc: StIbAlluoBTCAddress,
		iballuobtc: IbAlluoBTCAddress,
		referral: rexReferralAddress,
		twoWayusdcWeth: usdcEthMarketAddress,
		twoWaywethUsdc: ethUsdcMarketAddress,
		twoWaywbtcUsdc: wbtcUsdcMarketAddress,
		twoWayusdcWbtc: usdcWbtcMarketAddress,
		twoWayDaiWeth: daiEthMarketAddress,
		twoWayWethDai: ethDaiMarketAddress,
		twoWayMaticUsdc: maticUsdcMarketAddress,
		twoWayUsdcMatic: usdcMaticMarketAddress,
		usdcDai: USDC_DAI_MARKET_ADDRESS,
		daiUsdc: DAI_USDC_MARKET_ADDRESS,
		twoWayMaticDai: maticDaiMarketAddress,
		twoWayDaiMatic: daiMaticMarketAddress,
		twoWayWbtcDai: wbtcDaiMarketAddress,
		twoWayDaiWbtc: daiWbtcMarketAddress,
		twoWayRicUsdc: ricUsdcMarketAddress,
		twoWayUsdcRic: usdcRicMarketAddress,
		twoWayIbUsdIbEth: twoWayMarketibAlluoUSDETHAddress,
		twoWayIbEthIbUsd: twoWayMarketibAlluoUSDETHAddress,
		twoWayIbUsdIbBTC: twoWayMarketibAlluoUSDBTCAddress,
		twoWayIbBTCIbUsd: twoWayMarketibAlluoUSDBTCAddress,
		usdcRic: usdcxRicExchangeAddress,
	};

	//@ts-ignore
	return addresses[exchangeKey];
};
